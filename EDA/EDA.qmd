---
title: "EDA"
format: pdf
---

```{r setup, include=FALSE}
# This chunk prevents code from being shown and suppresses messages and warnings globally
knitr::opts_chunk$set(
  echo = FALSE,        # Hide code in output
  warning = FALSE,     # Suppress warnings
  message = FALSE      # Suppress messages
)
```

```{r include=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
library(gridExtra)
library(ggthemes)
library(forcats)
library(knitr)
library(kableExtra)
```

```{r include=FALSE, warning=FALSE, message=FALSE}
#data wrangling
# Import Data -------------------------------------------------------------

runs <- read_csv("..\\data\\runs.csv")
races <- read_csv("..\\data\\races.csv")


# Join --------------------------------------------------------------------

whole <- inner_join(runs, races, by="race_id")

# Changing Data Classes ---------------------------------------------------

whole$race_id <- as.character(whole$race_id)
whole$horse_no <- as.character(whole$horse_no)
whole$horse_id <- as.character(whole$horse_id)
whole$won <- as.logical(whole$won)
whole$horse_ratings <- as.character(whole$horse_ratings)
whole$draw <- as.character(whole$draw)
whole$jockey_id <- as.character(whole$jockey_id)
whole$trainer_id <- as.character(whole$trainer_id)
whole$race_no <- as.character(whole$race_no)
whole$surface <- as.character(whole$surface)
whole$race_class <- as.character(whole$race_class)
whole$time7 <- as.numeric(whole$time7)
whole$sec_time7 <- as.numeric(whole$sec_time7)
whole$distance <- as.character(whole$distance)
whole$result <- as.character(whole$result)

position_cols <- paste0("position_sec", 1:6)
place_cols <- paste0("place_combination", 1:4)
wincomb_cols <- paste0("win_combination",1:2)

for (col in c(place_cols, position_cols)) {
  whole[[col]] <- as.character(whole[[col]])
}

set.seed(510)
horses <- slice_sample(whole, n=10000)
```

```{r}
#Distribution of winning
whole %>% 
  ggplot()+
  geom_bar(aes(x=won),
           fill="black")+
  ggtitle("Distribitions of Won")+
  xlab("Won")+
  ylab("Count")+
  theme_few()

avg_no_horses_per_race <- runs %>% 
  group_by(race_id) %>% 
  summarise(horses_per_race = max(horse_no)) %>% 
  summarise(avg = mean(horses_per_race)) %>% 
  pull
```

The average number of horses per race is `r round(avg_no_horses_per_race, 2)`. On average the chance odds against winning are $\frac{1-p}{p}=\frac{11.65}{1}$, so $11.65:1$. Even though there is $\approx 0.079$  chance of winning, with `r sum(horses$won)` wins in our 10,000 training data we satisfy the one in ten rule.

\newpage

```{r warning=FALSE, message=FALSE}
#Distribution of Horse weight and jockey weight
pd <- whole %>% 
  ggplot()+
  geom_histogram(aes(x=declared_weight),
                 fill="black",
                 color="white")+
  theme_few()+
  ggtitle("Declared Weight of Horse and Jockey in lbs")+
  xlab("")

pj <- whole %>% 
  ggplot()+
  geom_histogram(aes(x=actual_weight),
                 fill="black",
                 color="white")+
  theme_few()+
  ggtitle("Actual Weight Carried by Horse in lbs")+
  xlab("")

ph <- whole %>% 
  mutate(horse_weight = declared_weight-actual_weight) %>% 
  ggplot()+
  geom_histogram(aes(x=horse_weight),
                 fill="black",
                 color="white")+
  theme_few()+
  ggtitle("Weight of Horse",
          subtitle = "Found by subtracting declared_weight by actual_weight")+
  xlab("")

grid.arrange(pd, pj, ncol=1)

ph
```

\newpage


```{r}
whole %>% 
  ggplot()+
  geom_bar(aes(x=distance),
           fill="black",
           weight="white")+
  theme_few()+
  ggtitle("Distribution of Race Distance")+
  xlab("distance in meters")
```
#### Percentiles For Horse Ratings
```{r}
quantile(whole$horse_rating, probs = c(.1, .15, .2, .5, .8, .85, .9))
```
About 60% of horses have a rating of 60

\newpage

```{r warning=FALSE, message=FALSE}
whole %>% 
  ggplot()+
  geom_histogram(aes(x=win_odds),
                 color="white",
                 fill="black")+
  theme_few()+
  ggtitle("Distribution of Win Odds")

```
```{r}
q3_win_odds <- whole %>%
  filter(won == TRUE) %>%
  summarize(Q3 = quantile(win_odds, 0.75, na.rm = TRUE)) %>%
  pull(Q3)

whole %>% 
  ggplot()+
  geom_boxplot(aes(x=win_odds,
                   y=won))+
  geom_vline(xintercept = q3_win_odds,
             linetype = "dashed",
             color = "red",
             size=1)+
  theme_few()+
  ggtitle("Distribution of Win Odds per Winning",
          subtitle = "75% of winning horses have win odds of less than 10:1")
```

\newpage

```{r}
whole %>% 
  ggplot() +
  geom_bar(aes(x = fct_infreq(horse_country)),
           fill="black",
           color="white") +
  theme_few() +
  xlab("Horse Country") + 
  ylab("Count")+
  ggtitle("Distribution of Horses by Country")+
  coord_flip()
```

```{r}
whole %>% 
  select(won, draw)%>%
  filter(draw!=15) %>% 
  group_by(draw) %>% 
  summarise(win = sum(won)/n(),
            lose = 1-win) %>% 
  pivot_longer(cols = c(win, lose)) %>% 
  ggplot()+
  geom_col(aes(x = name,
               y = value),
           fill="black",
           color="white")+
  facet_wrap(~as.numeric(draw))+
  theme_few()+
  xlab("")+
  ylab("proportion")+
  ggtitle("Proportion of Wins and Losses per Draw",
          subtitle = "winning and starting position are independent")
```

\newpage

```{r warning=FALSE, message=FALSE}
races %>% 
  ggplot()+
  geom_histogram(aes(x=win_dividend1),
                 binwidth = 20,
                 fill="black",
                 color="white")+
  theme_few()+
  xlim(0,2000)+
  xlab("Payout")+
  ggtitle("Distribution of First Place Dividend",
          subtitle = "The maximum payout was 2687.50")
```
```{r}
model <- lm(win_dividend1 ~ win_odds, data = whole %>% filter(won == 1, win_odds <98))

whole %>% 
  filter(won==1) %>% 
  ggplot()+
  geom_point(aes(y=win_dividend1,
                 x=win_odds),
             size=1)+
  theme_few()+
  ggtitle("As Win Odds increase by 1, payout increases by 10",
          subtitle = "Per a SLR model that excludes win odds greater than 98")
```
\newpage

```{r}
level_counts <- data.frame(levels=sapply(sapply(whole[,sapply(whole, is.character)], unique), length))

level_counts %>% 
  arrange(desc(levels)) %>% 
  kable(
    format = "latex",
    col.names = c("Variable", "Number of Levels"),
    caption = "Number of Levels per Character Variable"
  )
```


